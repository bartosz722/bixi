#ifndef SPACECRAFT_H_
#define SPACECRAFT_H_

#include "PhysicalObject.h"

class Spacecraft: public PhysicalObject {
public:
  Spacecraft();
  virtual ~Spacecraft();

  virtual std::unique_ptr<PhysicalObject> copy() const;
  virtual void copyFrom(const PhysicalObject & other);

  // Calculates:
  // - next engine on
  // - next propellant mass
  // - force generated by thruster that is added to _force variable
  void calculateNextStateVariables(double deltaTime);

  virtual void moveToNextState(double deltaTime) override;
  virtual void clearNextStateVariables() override;

  /* Engine can be turned on or off externally. Internally it can only be turned off
   * when propellant runs out.
   * Propellant is thrust in opposite to PhysicalObject::_direction.
   */

  // State:
  bool _engineOn;
  double _propellantMass; // kg, it is included in _mass of PhysicalObject
  double _thrustMassRate; // kg/s
  double _thrustSpeed; // m/s, relative to object

  // Next state variables:
  bool _propellantRunsOut;
  double _ejectedPropellantMass; // kg

};

#endif /* SPACECRAFT_H_ */
